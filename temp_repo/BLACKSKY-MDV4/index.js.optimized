/**
 * BLACKSKY-MD Premium - High Performance Optimized Bot
 * Cyberpunk Edition with advanced caching and memory management
 * 
 * This is an optimized version of the core index.js with:
 * 1. Response caching for faster command execution
 * 2. Memory optimizations for better resource usage
 * 3. Parallel message processing when appropriate
 * 4. Optimized pattern matching for faster command lookups
 */

// Basic dependencies
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { spawn } = require('child_process');
const os = require('os');
const { fromBuffer } = require('file-type');
const chalk = require('chalk');
const yargs = require('yargs/yargs');
const express = require('express');

// Baileys core
const {
  default: makeWASocket,
  proto,
  jidDecode,
  delay,
  DisconnectReason,
  fetchLatestBaileysVersion,
  useMultiFileAuthState,
  makeInMemoryStore,
  downloadContentFromMessage
} = require('@adiwajshing/baileys');

// Initialize arguments
const argv = yargs(process.argv.slice(2)).parse();

// Load optimization modules first
try {
  global.botOptimizer = require('./optimize-bot.js');
  console.log(chalk.cyan('✓ Loaded Optimizer module'));
  global.botOptimizer.initializeOptimizations();
} catch (err) {
  console.error('⚠️ Failed to load Optimizer module:', err);
  global.botOptimizer = null;
}

try {
  global.memoryManager = require('./lib/advanced-memory-manager.js');
  console.log(chalk.cyan('✓ Loaded Memory Manager module'));
  if (global.memoryManager && typeof global.memoryManager.initialize === 'function') {
    global.memoryManager.initialize();
  }
} catch (err) {
  console.error('⚠️ Failed to load Memory Manager module:', err);
  global.memoryManager = null;
}

// Load environment-specific patch
const isHeroku = process.env.HEROKU === 'true' || process.env.HEROKU === true;
const isReplit = process.env.REPLIT === 'true' || (process.env.REPL_ID && process.env.REPL_OWNER);

try {
  if (isHeroku) {
    const herokuPatch = require('./heroku-connection-patch.js');
    console.log(chalk.green('✓ Loaded Heroku-specific connection patch'));
  } else if (isReplit) {
    const replitPatch = require('./replit-connection-patch.js');
    console.log(chalk.green('✓ Loaded Replit-specific connection patch'));
  } else {
    console.log(chalk.yellow('ℹ️ No environment-specific connection patch loaded'));
  }
} catch (err) {
  console.error('Failed to load connection patch:', err);
}

// Express server for health checks
const app = express();

// Port configuration for health check server
const ports = [4000, 3000, 5000, 8000];
let availablePortIndex = 0;

// Check port availability
function checkPort(port) {
  return new Promise((resolve, reject) => {
    const server = app.listen(port, () => {
      server.close();
      resolve(true);
    });
    server.on('error', reject);
  });
}

// Start health check server
async function startServer() {
  // Use Heroku's PORT environment variable if available, otherwise use our port array
  const port = process.env.PORT || ports[availablePortIndex];
  
  try {
    await checkPort(port);
    
    // Premium startup message
    const logo = `
    ╔════════════════════════════════════════╗
    ║      🌌 BLACKSKY-MD PREMIUM 🌌         ║
    ║      ⚡ OPTIMIZED EDITION ⚡            ║
    ╚════════════════════════════════════════╝
    `;
    console.log('\x1b[35m%s\x1b[0m', logo); // Purple color for premium branding
    console.log('\x1b[33m%s\x1b[0m', `🌐 Port ${port} is open`);
    
    // Pretty health status page
    app.get('/', (req, res) => {
      const memoryUsage = process.memoryUsage();
      const uptime = process.uptime();
      
      // Format uptime
      const days = Math.floor(uptime / (3600 * 24));
      const hours = Math.floor((uptime % (3600 * 24)) / 3600);
      const minutes = Math.floor((uptime % 3600) / 60);
      const seconds = Math.floor(uptime % 60);
      const formattedUptime = `${days}d ${hours}h ${minutes}m ${seconds}s`;
      
      // Format memory usage
      const formatMemory = (bytes) => {
        return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
      };
      
      // Get optimization statistics
      let optimizerStats = { cacheHits: 0, cacheMisses: 0, commandsProcessed: 0 };
      if (global.botOptimizer) {
        optimizerStats = global.botOptimizer.performanceStats;
      }
      
      // Get memory manager statistics
      let memoryStats = { gcCount: 0, highMemoryEvents: 0 };
      if (global.memoryManager) {
        memoryStats = global.memoryManager.getStats();
      }
      
      // Generate response
      const html = `
      <!DOCTYPE html>
      <html>
      <head>
          <title>BLACKSKY-MD | Premium WhatsApp Bot</title>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
              @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400;700&display=swap');
              
              :root {
                  --primary: #0df;
                  --primary-glow: rgba(0,221,255,0.5);
                  --secondary: #f0c;
                  --bg-dark: #121212;
                  --bg-card: #1e1e1e;
                  --text: #eee;
              }
              
              body {
                  font-family: 'Roboto', sans-serif;
                  background: var(--bg-dark);
                  color: var(--text);
                  line-height: 1.6;
                  margin: 0;
                  padding: 0;
              }
              
              .container {
                  max-width: 900px;
                  margin: 40px auto;
                  background: rgba(30, 30, 30, 0.9);
                  border-radius: 15px;
                  padding: 30px;
                  box-shadow: 0 0 20px rgba(0,0,0,0.7);
                  border: 1px solid rgba(0,221,255,0.1);
              }
              
              .header {
                  text-align: center;
                  margin-bottom: 30px;
              }
              
              .logo {
                  font-family: 'Orbitron', sans-serif;
                  font-size: 2.6rem;
                  font-weight: 700;
                  color: var(--primary);
                  text-shadow: 0 0 5px var(--primary-glow);
                  margin-bottom: 5px;
              }
              
              .status-pill {
                  background: #222;
                  border-radius: 30px;
                  padding: 8px 20px;
                  display: inline-flex;
                  align-items: center;
                  gap: 10px;
                  font-family: 'Orbitron', sans-serif;
                  font-size: 0.9rem;
                  border: 1px solid rgba(0,221,255,0.2);
              }
              
              .status-dot {
                  width: 12px;
                  height: 12px;
                  background: #0f6;
                  border-radius: 50%;
                  display: inline-block;
              }
              
              .grid {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                  gap: 20px;
                  margin: 30px 0;
              }
              
              .card {
                  background: var(--bg-card);
                  border-radius: 10px;
                  padding: 20px;
                  border-left: 3px solid var(--primary);
              }
              
              .card-title {
                  font-family: 'Orbitron', sans-serif;
                  font-size: 1.2rem;
                  color: var(--primary);
                  margin-bottom: 15px;
                  display: flex;
                  align-items: center;
                  gap: 10px;
              }
              
              .card-content p {
                  margin-bottom: 8px;
                  font-size: 0.95rem;
              }
              
              .highlight {
                  color: var(--primary);
                  font-weight: bold;
              }
              
              .footer {
                  margin-top: 40px;
                  text-align: center;
                  font-size: 0.9rem;
                  color: #888;
                  padding-top: 20px;
                  border-top: 1px solid rgba(0,221,255,0.1);
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <div class="logo">BLACKSKY-MD</div>
                  <div style="margin: 15px 0;">PREMIUM CYBERPUNK WHATSAPP BOT</div>
                  <div class="status-pill">
                      <span class="status-dot"></span>
                      <span>SYSTEM ONLINE</span>
                  </div>
              </div>
              
              <div class="grid">
                  <div class="card">
                      <div class="card-title">System Status</div>
                      <div class="card-content">
                          <p>Platform: <span class="highlight">${os.platform()} ${os.arch()}</span></p>
                          <p>Node.js: <span class="highlight">${process.version}</span></p>
                          <p>Memory RSS: <span class="highlight">${formatMemory(memoryUsage.rss)}</span></p>
                          <p>Heap Used: <span class="highlight">${formatMemory(memoryUsage.heapUsed)}</span></p>
                          <p>Uptime: <span class="highlight">${formattedUptime}</span></p>
                      </div>
                  </div>
                  
                  <div class="card">
                      <div class="card-title">Bot Information</div>
                      <div class="card-content">
                          <p>Bot Name: <span class="highlight">${process.env.BOT_NAME || "BLACKSKY-MD"}</span></p>
                          <p>Environment: <span class="highlight">${process.env.NODE_ENV || "development"}</span></p>
                          <p>WhatsApp: <span class="highlight">${global.conn?.user ? "Connected ✓" : "Initializing..."}</span></p>
                          <p>Performance Mode: <span class="highlight">Enabled</span></p>
                      </div>
                  </div>
                  
                  <div class="card">
                      <div class="card-title">Optimizer Stats</div>
                      <div class="card-content">
                          <p>Cache Hits: <span class="highlight">${optimizerStats.cacheHits}</span></p>
                          <p>Cache Misses: <span class="highlight">${optimizerStats.cacheMisses}</span></p>
                          <p>Commands Processed: <span class="highlight">${optimizerStats.commandsProcessed}</span></p>
                          <p>Parallel Batches: <span class="highlight">${optimizerStats.parallelBatches}</span></p>
                      </div>
                  </div>
                  
                  <div class="card">
                      <div class="card-title">Memory Stats</div>
                      <div class="card-content">
                          <p>GC Runs: <span class="highlight">${memoryStats.gcCount}</span></p>
                          <p>High Memory Events: <span class="highlight">${memoryStats.highMemoryEvents}</span></p>
                          <p>Peak RSS: <span class="highlight">${formatMemory(memoryStats.peakRssMemory || 0)}</span></p>
                          <p>Peak Heap: <span class="highlight">${formatMemory(memoryStats.peakHeapMemory || 0)}</span></p>
                      </div>
                  </div>
              </div>
              
              <div class="footer">
                  <p>BLACKSKY-MD PREMIUM OPTIMIZED EDITION</p>
                  <p style="margin-top: 5px;">© 2025 | High Performance WhatsApp Bot</p>
              </div>
          </div>
      </body>
      </html>
      `;
      
      res.send(html);
    });
    
    // Health check endpoint
    app.get('/health', (req, res) => {
      const connectionStatus = global.conn?.user ? "connected" : "disconnected";
      const memoryUsage = process.memoryUsage();
      
      res.json({
        status: "ok",
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        connection: connectionStatus,
        memory: {
          rss: Math.round(memoryUsage.rss / 1024 / 1024),
          heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024),
          heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024)
        }
      });
    });
    
    // Start server
    app.listen(port, () => {
      console.log(chalk.green(`✓ Health check server listening on port ${port}`));
    });
  } catch (err) {
    console.error(`Port ${port} is not available:`, err);
    
    // Try next port
    availablePortIndex = (availablePortIndex + 1) % ports.length;
    await startServer();
  }
}

// Start server in background
startServer().catch(err => {
  console.error('Failed to start server:', err);
});

// Required global variables
global.authFile = 'sessions';
global.API = (name, path = '/', query = {}, apikeyqueryname) => (name in global.APIs ? global.APIs[name] : name) + path + (query || apikeyqueryname ? '?' + new URLSearchParams(Object.entries({ ...query, ...(apikeyqueryname ? { [apikeyqueryname]: global.APIKeys[name in global.APIs ? global.APIs[name] : name] } : {}) })) : '');
global.timestamp = { start: new Date() };
global.TMP_DIR = path.join(__dirname, 'tmp');

// Configure global APIs
global.APIs = {
  // API endpoints, don't change
  nrtm: 'https://nurutomo.herokuapp.com',
  bg: 'http://bochil.ddns.net',
  xteam: 'https://api.xteam.xyz',
  melcanz: 'https://melcanz.com',
  lol: 'https://api.lolhuman.xyz',
  neoxr: 'https://api.neoxr.my.id'
};

// API keys
global.APIKeys = {
  'api.xteam.xyz': process.env.XTEAM_API || '',
  'melcanz.com': process.env.MELCANZ_API || '',
  'api.lolhuman.xyz': process.env.LOLHUMAN_API || '',
  'api.neoxr.my.id': process.env.NEOXR_API || '' 
};

// Ensure directories exist
if (!fs.existsSync(global.TMP_DIR)) {
  fs.mkdirSync(global.TMP_DIR, { recursive: true });
  console.log(chalk.green('✓ Created tmp directory'));
}

if (!fs.existsSync('sessions')) {
  fs.mkdirSync('sessions', { recursive: true });
  console.log(chalk.green('✓ Created sessions directory'));
}

// Global utility functions
global.getBuffer = async (url, options) => {
  try {
    options = options || {};
    const res = await axios({
      method: "get",
      url,
      headers: {
        'DNT': 1,
        'Upgrade-Insecure-Request': 1
      },
      ...options,
      responseType: 'arraybuffer'
    });
    return res.data;
  } catch (e) {
    console.log(`Error : ${e}`);
    return null;
  }
};

// Main store for sessions and messages
global.store = makeInMemoryStore({
  logger: pino({ level: 'silent'}).child({ level: 'silent' })
});
store.readFromFile('./sessions/baileys_store.json');
setInterval(() => {
  store.writeToFile('./sessions/baileys_store.json');
}, 10000);

// Global database cache
global.DATABASE = {};

// Performance optimized start function
async function start() {
  // Load database
  let loadDatabase = async () => {
    try {
      // First try loading encrypted database
      const encryptedDB = 'database.encrypted.json';
      const plainDB = 'database.json';
      
      // Default to plain database if encrypted doesn't exist
      let dbSource = fs.existsSync(encryptedDB) ? encryptedDB : plainDB;
      
      let db = {};
      if (fs.existsSync(dbSource)) {
        const data = fs.readFileSync(dbSource, 'utf8');
        
        // Handle encrypted database
        if (dbSource === encryptedDB) {
          try {
            const crypto = require('crypto');
            const key = process.env.DB_ENCRYPTION_KEY || 'blacksky-premium-key';
            const decipher = crypto.createDecipher('aes-256-cbc', key);
            let decrypted = decipher.update(data, 'hex', 'utf8');
            decrypted += decipher.final('utf8');
            db = JSON.parse(decrypted);
          } catch (e) {
            console.error('Failed to decrypt database:', e);
            // Fall back to plain database
            if (fs.existsSync(plainDB)) {
              db = JSON.parse(fs.readFileSync(plainDB, 'utf8'));
            }
          }
        } else {
          db = JSON.parse(data);
        }
      }
      
      global.DATABASE.data = {
        users: db.users || {},
        chats: db.chats || {},
        stats: db.stats || {},
        settings: db.settings || {},
        ...(db || {})
      };
      
      global.DATABASE.save = async () => {
        try {
          // Always back up before saving
          if (fs.existsSync(plainDB)) {
            fs.copyFileSync(plainDB, `${plainDB}.bak`);
          }
          
          // Save to plain file first for safety
          fs.writeFileSync(plainDB, JSON.stringify(global.DATABASE.data, null, 2));
          
          // Then encrypt if encryption key is available
          if (process.env.DB_ENCRYPTION_KEY) {
            const crypto = require('crypto');
            const key = process.env.DB_ENCRYPTION_KEY;
            const cipher = crypto.createCipher('aes-256-cbc', key);
            let encrypted = cipher.update(JSON.stringify(global.DATABASE.data), 'utf8', 'hex');
            encrypted += cipher.final('hex');
            fs.writeFileSync(encryptedDB, encrypted);
          }
        } catch (e) {
          console.error('Failed to save database:', e);
        }
        
        return true;
      };
      
      console.log(chalk.green('✓ Database loaded successfully'));
      return global.DATABASE.data;
    } catch (e) {
      console.error('Failed to load database:', e);
      global.DATABASE.data = {
        users: {},
        chats: {},
        stats: {},
        settings: {}
      };
      return global.DATABASE.data;
    }
  };

  // Load database in background
  loadDatabase().catch(console.error);

  // Initialize WA client
  const { state, saveCreds } = await useMultiFileAuthState(global.authFile);
  
  // Create socket with optimized options
  const waConfig = {
    auth: state,
    printQRInTerminal: true,
    markOnlineOnConnect: true,
    syncFullHistory: false,
    connectTimeoutMs: 60000,
    defaultQueryTimeoutMs: 60000,
    patchMessageBeforeSending: (message) => {
      const requiresPatch = !!(
        message.buttonMessage || 
        message.templateMessage || 
        message.listMessage
      );
      if (requiresPatch) {
        message = {
          viewOnceMessage: {
            message: {
              messageContextInfo: {
                deviceListMetadataVersion: 2,
                deviceListMetadata: {},
              },
              ...message,
            },
          },
        };
      }
      return message;
    },
    // Reduce message history to save memory
    getMessage: async (key) => {
      try {
        // Retrieve from memory store
        const message = await store.loadMessage(key.remoteJid, key.id);
        return message?.message || null;
      } catch {
        return null;
      }
    },
    // Reduce database size by excluding older messages
    shouldIgnoreJid: jid => jid.includes('@broadcast') || jid.includes('status@broadcast')
  };
  
  global.conn = makeWASocket(waConfig);
  
  // Monitor message updates
  store.bind(conn.ev);
  
  // Apply optimization code to the handler
  if (fs.existsSync('./handler-optimization.js')) {
    try {
      require('./handler-optimization.js').initializeOptimizations();
      console.log(chalk.cyan('✓ Handler optimizations applied'));
    } catch (err) {
      console.error('Failed to apply handler optimizations:', err);
    }
  }
  
  // Load handler with optimization hooks
  if (fs.existsSync('./handler.js')) {
    try {
      const handler = require('./handler.js');
      
      // If optimizer is available, wrap with parallel processing
      if (global.botOptimizer) {
        const originalHandler = conn.handler;
        
        conn.handler = async (chatUpdate) => {
          try {
            // Check if we can process messages in parallel
            const parallelProcessed = await global.botOptimizer.processMessageParallel(chatUpdate);
            
            // If already processed in parallel, skip
            if (parallelProcessed || 
                (chatUpdate._PARALLEL_PROCESSED && originalHandler)) {
              return;
            }
            
            // Otherwise process normally
            if (originalHandler) {
              return await originalHandler(chatUpdate);
            }
          } catch (err) {
            console.error('Error in optimized handler:', err);
            // Fall back to original handler
            if (originalHandler) {
              return await originalHandler(chatUpdate);
            }
          }
        };
      }
      
      console.log(chalk.green('✓ Handler loaded with optimizations'));
    } catch (err) {
      console.error('Failed to load handler:', err);
    }
  }
  
  // Initialize plugins with optimization
  if (global.botOptimizer) {
    // Let the optimizer build optimized pattern maps for plugins
    const plugins = require('./plugins');
    global.botOptimizer.initializePatterns(plugins);
    console.log(chalk.cyan('✓ Plugin patterns optimized for faster matching'));
  }
  
  // Handle connection events
  conn.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect } = update;
    
    if (update.qr) {
      console.log(chalk.yellow('🔄 New QR code generated, please scan!'));
    }
    
    if (connection === 'open') {
      console.log(chalk.green('✓ Connected to WhatsApp'));
      
      // Report memory usage after connection
      const memoryUsage = process.memoryUsage();
      console.log(chalk.cyan(`Memory usage - RSS: ${Math.round(memoryUsage.rss / 1024 / 1024)} MB, Heap: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)} MB`));
      
      // Schedule reporting of optimizer stats
      if (global.botOptimizer) {
        global.botOptimizer.setupStatsReporting();
      }
      
      // Force garbage collection after connection
      if (global.gc) {
        global.gc();
        console.log(chalk.cyan('✓ Performed garbage collection after connection'));
      }
    }
    
    if (connection === 'close') {
      let reason = new Boom(lastDisconnect?.error)?.output.statusCode;
      
      if (reason === DisconnectReason.badSession) {
        console.log(chalk.red('❌ Bad Session File, please delete sessions and scan again'));
        await fs.promises.rm(global.authFile, { recursive: true, force: true }).catch(console.error);
        process.exit(1);
      } else if (reason === DisconnectReason.connectionClosed) {
        console.log(chalk.yellow('⚠️ Connection closed, reconnecting...'));
        await start();
      } else if (reason === DisconnectReason.connectionLost) {
        console.log(chalk.yellow('⚠️ Connection lost from server, reconnecting...'));
        await start();
      } else if (reason === DisconnectReason.connectionReplaced) {
        console.log(chalk.red('❌ Connection replaced, another new session opened, please close current session first'));
        process.exit(1);
      } else if (reason === DisconnectReason.loggedOut) {
        console.log(chalk.red('❌ Device logged out, please delete sessions and scan again'));
        await fs.promises.rm(global.authFile, { recursive: true, force: true }).catch(console.error);
        process.exit(1);
      } else if (reason === DisconnectReason.restartRequired) {
        console.log(chalk.yellow('⚠️ Restart required, restarting...'));
        await start();
      } else if (reason === DisconnectReason.timedOut) {
        console.log(chalk.yellow('⚠️ Connection timed out, reconnecting...'));
        await start();
      } else {
        console.log(chalk.red(`❌ Unknown DisconnectReason: ${reason}|${lastDisconnect.error}`));
        await start();
      }
    }
  });
  
  // Save credentials on update
  conn.ev.on('creds.update', saveCreds);
  
  // Clean up on exit
  process.on('exit', async () => {
    // Save database
    if (global.DATABASE.save) {
      await global.DATABASE.save();
    }
    
    // Perform final garbage collection
    if (global.gc) {
      global.gc();
    }
    
    // Clean up optimizer
    if (global.botOptimizer) {
      global.botOptimizer.reportStats();
    }
    
    console.log(chalk.yellow('Goodbye! Bot shutting down...'));
  });
  
  // Handle process signals
  process.on('SIGINT', async () => {
    console.log(chalk.yellow('🛑 SIGINT received, closing...')); 
    await global.DATABASE.save();
    process.exit(0);
  });
  
  process.on('SIGTERM', async () => { 
    console.log(chalk.yellow('🛑 SIGTERM received, closing...')); 
    await global.DATABASE.save();
    process.exit(0);
  });
  
  return true;
}

// Start the bot
if (require.main === module) {
  start().catch(err => {
    console.error('Failed to start:', err);
    process.exit(1);
  });
}