/**
 * Example Command with Translations
 * 
 * This plugin demonstrates how to use the translation system for a new command.
 */

const { getMessage } = require('../lib/languages');

let handler = async (m, { conn, text, args, usedPrefix, command }) => {
  try {
    // Get user's language setting
    const lang = global.db.data.users[m.sender].language || 'en';
    
    // Display command title and description
    let message = `${getMessage("example_command_title", lang)}\n`;
    message += `${getMessage("example_command_description", lang)}\n\n`;
    
    // Show usage if no arguments provided
    if (!text) {
      message += getMessage("example_command_usage", lang, {
        prefix: usedPrefix
      });
      return conn.reply(m.chat, message, m);
    }
    
    // Process the command...
    // (This is just a demo, so we'll just show a success message)
    
    // Show success message with username placeholder
    message += getMessage("example_command_success", lang, {
      username: m.name || m.sender.split('@')[0]
    });
    
    conn.reply(m.chat, message, m);
  } catch (error) {
    // Show error message in user's language
    const lang = global.db.data.users[m.sender].language || 'en';
    conn.reply(m.chat, getMessage("example_command_error", lang), m);
    console.error(error);
  }
};

handler.help = ['example [option]'];
handler.tags = ['example'];
handler.command = /^(example)$/i;

module.exports = handler;
